你是一个资深 Java 后端工程师。请为我的 Spring Boot 项目生成 Service 和 Controller 代码，要求如下：

项目结构：
- entity：放实体类
- repository：放 JPA Repository 接口
- service：放业务逻辑 Service
- controller：放 REST 控制器
- dto：放请求/响应 DTO（包含 RequestDTO、ResponseDTO、Mapper）
- exception：放全局异常（已有，比如 EntityNotFoundException）
- common/response：已有统一返回类 ApiResponse<T>
- constants：全局常量
- security：JWT 等安全相关类
- resources/db/migration：Flyway SQL 脚本

技术栈：
- Spring Boot 最新版本
- Spring Data JPA + Hibernate
- Lombok
- Java 21+
- 统一异常处理（已有 exception 包）
- 统一返回结构（ApiResponse<T>）
- 日志用 Slf4j

需要生成：
1. DTO（放到 dto 包，比如 UserRequestDTO, UserResponseDTO, UserMapper）
   - RequestDTO：接收前端请求参数，带 @Valid 注解（如 @NotBlank, @Size）
   - ResponseDTO：返回给前端的字段，避免直接暴露 Entity
   - Mapper：提供 Entity ↔ DTO 的转换方法，可以手写，也可以用 MapStruct

2. Service 类（放到 service 包，比如 EntityNameService）
   - 提供标准 CRUD：
     - createEntityName(EntityNameRequestDTO requestDTO) → 返回 ResponseDTO
     - getEntityNameById(Long id) → 返回 ResponseDTO（找不到时抛 EntityNotFoundException）
     - getAllEntityNames() → 返回 ResponseDTO 列表
     - updateEntityName(Long id, EntityNameRequestDTO requestDTO) → 返回 ResponseDTO
     - deleteEntityName(Long id) → 返回 void
   - 内部用 Repository 操作 Entity，进出参数用 DTO（通过 Mapper 转换）
   - 使用 @Service、@Slf4j
   - 构造函数注入 Repository
   - 返回 Optional 或抛异常

3. Controller 类（放到 controller 包，比如 EntityNameController）
   - @RestController, @RequestMapping("/api/entitynames")
   - API：
     - POST /api/entitynames → 创建（请求 RequestDTO，返回 ApiResponse<ResponseDTO>）
     - GET /api/entitynames/{id} → 根据 ID 获取（返回 ApiResponse<ResponseDTO>）
     - GET /api/entitynames → 获取所有（支持 Pageable 分页 & 排序，返回 ApiResponse<Page<ResponseDTO>>）
     - PUT /api/entitynames/{id} → 更新（请求 RequestDTO，返回 ApiResponse<ResponseDTO>）
     - DELETE /api/entitynames/{id} → 删除（返回 204）
   - 使用 @RequestBody, @PathVariable, @Valid
   - 返回 ResponseEntity<ApiResponse<T>>
   - Controller 层只接收 DTO 和返回 DTO，不直接暴露 Entity
   - 日志打印（log.info）

额外要求：
- 包结构必须和我现有目录对齐
- 所有方法写 JavaDoc
- 使用 @Slf4j 记录关键操作
- CRUD 方法默认返回 ApiResponse<T>
- 分页查询使用 Pageable
- Controller 层和 Service 层之间通过 DTO 交互，Entity 不直接暴露
